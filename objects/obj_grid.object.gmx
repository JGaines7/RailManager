<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define Constants and globals related to the world grid.
global.world_width = 1000;
global.world_height = 1000;

global.tile_size = 32; //tile size in px
global.tile_size_bit_shift = 5 //tile size for bit shift division 32px =&gt; 5 | 16px =&gt; 4

//size of world in tiles
global.grid_height = global.tile_size * global.world_height;
global.grid_width = global.tile_size * global.world_width;

//world offset from 0. TODO: Added because tutorial. Maybe remove.
global.xorigin = 0;
global.yorigin = 0;

scr_init_grid_buffer_definitions();

//set grid depth to 1
depth = 1
//if object based rendering not enough, maybe make a rendering object someday to render everything?


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Grid
//draw_enable_alphablend(false);
draw_set_alpha_test(false);


//show_debug_overlay(true)
global.world_buffer = buffer_create(global.world_width * global.world_height * 4, buffer_fixed, global.world_buffer_data_size)
buffer_seek(global.world_buffer, buffer_seek_start, 0);

//x0y0 x1y0 x2y0 x0y1 x1y1 x2y1
//x0y0 x0y1 x0y2 x1y0 x1y1 x1y2
for (var xp = 0; xp &lt; global.world_width; xp++)
{
    for(var yp = 0; yp &lt; global.world_height; yp++)
    {
        //16 bits to be written to buffer position
        var bitField16Bit = 0;
        
        var tileType = 0
        if(irandom_range(0, 10) == 0)
        {
            tileType = 1
        }
        
        var tileVariant = 0
        if(tileType == 0)
        {
            tileVariant = irandom_range(0, sprite_get_number(spr_grass)-1)
        }
        else if (tileType == 1)
        {
            tileVariant = irandom_range(0, sprite_get_number(spr_water)-1)
        }
        //Push tile type
        bitField16Bit = bitField16Bit | (tileType &lt;&lt; global.tile_type_shift)
        //Push tile variant
        bitField16Bit = bitField16Bit | (tileVariant &lt;&lt; global.tile_variant_shift)
        buffer_write(global.world_buffer, buffer_u16, bitField16Bit)
    }
    
}
//Put in test rail
scr_createTestMap()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ds_grid_destroy(world_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw every item in grid

var x_index_low_bound = min(max(0,((view_xview ) &gt;&gt; global.tile_size_bit_shift) - 2), global.world_width)
var y_index_low_bound = min(max(0,((view_yview ) &gt;&gt; global.tile_size_bit_shift) - 2), global.world_height)

var x_index_high_bound = min(max(0,(view_xview + view_wview[0] ) &gt;&gt; 5), global.world_width)
var y_index_high_bound = min(max(0,(view_yview + view_hview[0] ) &gt;&gt; 5), global.world_height)


//TODO: Random search may be slower than i want. (using getTile)
//maybe what i SHOULD do is..
//find the first points for low x
//read $(width) times then seek again. at low x + width
//each read i draw at the given x value and increment by 1
var starting_buffer_seek_offset = scr_tile_position_to_buffer_offset(x_index_low_bound, y_index_low_bound);
var buffer_seek_offset = starting_buffer_seek_offset;
var num_tiles_to_render = (x_index_high_bound - x_index_low_bound + 1) * (y_index_high_bound - y_index_low_bound + 1)

var num_tiles_rendered = 0;
var current_x = x_index_low_bound;
var current_y = y_index_low_bound;

buffer_seek(global.world_buffer, buffer_seek_start, starting_buffer_seek_offset);

while (num_tiles_rendered &lt;= num_tiles_to_render)
{
    while(current_y &lt;= y_index_high_bound)
    {
    
        //read and assign to current_x, current_y
        var bitField16Bit = buffer_read(global.world_buffer, buffer_u16)
        
        var tileType =    (bitField16Bit &gt;&gt; global.tile_type_shift)    &amp; global.tile_type_bits;
        var tileVariant = (bitField16Bit &gt;&gt; global.tile_variant_shift) &amp; global.tile_variant_bits;
        
        //show_debug_message("Type : " + string(tileType) + "Var: " + string(tileVariant))

        draw_sprite(global.tileSpriteMap[? tileType], tileVariant,global.xorigin + current_x*global.tile_size, global.yorigin + current_y*global.tile_size)
        
        current_y++;
        num_tiles_rendered++
    }
    current_x++;
    current_y = y_index_low_bound;
    //move seeker up to start of next column start
    //buffer_seek(global.world_buffer, buffer_seek_start, starting_buffer_seek_offset);
    buffer_seek(global.world_buffer, buffer_seek_start, scr_tile_position_to_buffer_offset(current_x, current_y));
    
    
}

    
//NOT SURE IF THIS IS ANY SLOWER. KEEP FOR NOW?
/*
for (var xp = x_index_low_bound; xp &lt; x_index_high_bound; xp++)
{
    for(var yp = y_index_low_bound; yp &lt; y_index_high_bound; yp++)
    {
    
        var bitField16Bit = scr_get_tile_word(xp,yp)
        var tileType =    (bitField16Bit &gt;&gt; global.tile_type_shift)    &amp; global.tile_type_bits
        var tileVariant = (bitField16Bit &gt;&gt; global.tile_variant_shift) &amp; global.tile_variant_bits
        
        //show_debug_message("Type : " + string(tileType) + "Var: " + string(tileVariant))
        //if(tileVariant
        draw_sprite(global.tileSpriteMap[? tileType], tileVariant,global.xorigin + xp*global.tile_size, global.yorigin + yp*global.tile_size)


    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
