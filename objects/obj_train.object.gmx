<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>trainHeader</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 0;

spaceDown = false;

//Properties

wagons = 0;
max_speed = 15 // px/frame
blocked = false
acceleration = 0.02 // px/frame^2
selectedTrain = true;
path = -1;

destination_tile_x = 20;
destination_tile_y = 24;

//tile that the head of the train is occupying (used for pathing tile checking)
current_tile_x = scr_real_x_to_index(x);
current_tile_y = scr_real_y_to_index(y);

//enabled flag. (dev?)
enabled = false;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//
if(selectedTrain &amp;&amp; keyboard_check(vk_space) &amp;&amp; !spaceDown){
    m_destination_index_x = scr_real_x_to_index(mouse_x)
    m_destination_index_y = scr_real_y_to_index(mouse_y)
    spaceDown = true;
    path=scr_generate_path(x,y,m_destination_index_x,m_destination_index_y);
    path_start(path,path_speed,0,true);
    
}
else if(!keyboard_check(vk_space))
{
    spaceDown = false;
}

//Recalculate path if moving onto invalid tile. Map must have changed.
//TODO: Triggers on rounding corners at high speed.
if(path_exists(path))
{
    var new_x = scr_real_x_to_index(x + lengthdir_x(path_speed + 16, direction));
    var new_y = scr_real_y_to_index(y + lengthdir_y(path_speed + 16, direction));
    //check if we would be in new tile if we moved
    var entering_new_tile = new_x != current_tile_x || new_y != current_tile_y;
    if(entering_new_tile)
    {
        var tile_type = scr_get_tile_type(new_x, new_y);
        if (tile_type != global.SPR_KEY_RAIL)
        {
            speed = 0;
            path=scr_generate_path(x,y,m_destination_index_x,m_destination_index_y);
            path_start(path,path_speed,0,true);
        }
        else
        {
            blocked = false;
            current_tile_x = new_x;
            current_tile_y = new_y;
        }
    }
}

if (path_exists(path))
{
    path_speed += acceleration
    if (path_speed &gt; max_speed)
    {
        //show_debug_message("speed: " + string(speed))
        path_speed = max_speed
    }
    if(path_position == 1)
    {
        path_delete(path);
        path_speed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(trainHeader, 0,x,y,1,1,direction,c_white,1);
if(path_exists(path))
{
    draw_path(path,x,y,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
